// Generated by gencpp from file sawyer_beer/targetRequest.msg
// DO NOT EDIT!


#ifndef SAWYER_BEER_MESSAGE_TARGETREQUEST_H
#define SAWYER_BEER_MESSAGE_TARGETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sawyer_beer
{
template <class ContainerAllocator>
struct targetRequest_
{
  typedef targetRequest_<ContainerAllocator> Type;

  targetRequest_()
    : data(false)  {
    }
  targetRequest_(const ContainerAllocator& _alloc)
    : data(false)  {
  (void)_alloc;
    }



   typedef uint8_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::sawyer_beer::targetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sawyer_beer::targetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct targetRequest_

typedef ::sawyer_beer::targetRequest_<std::allocator<void> > targetRequest;

typedef boost::shared_ptr< ::sawyer_beer::targetRequest > targetRequestPtr;
typedef boost::shared_ptr< ::sawyer_beer::targetRequest const> targetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sawyer_beer::targetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sawyer_beer::targetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sawyer_beer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'intera_core_msgs': ['/home/parallels/ros_ws/src/intera_common/intera_core_msgs/msg', '/home/parallels/ros_ws/devel/share/intera_core_msgs/msg'], 'sawyer_beer': ['/home/parallels/ros_ws/src/sawyer_beer-final_demo/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sawyer_beer::targetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sawyer_beer::targetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sawyer_beer::targetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sawyer_beer::targetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sawyer_beer::targetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sawyer_beer::targetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sawyer_beer::targetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b94c1b53db61fb6aed406028ad6332a";
  }

  static const char* value(const ::sawyer_beer::targetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b94c1b53db61fb6ULL;
  static const uint64_t static_value2 = 0xaed406028ad6332aULL;
};

template<class ContainerAllocator>
struct DataType< ::sawyer_beer::targetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sawyer_beer/targetRequest";
  }

  static const char* value(const ::sawyer_beer::targetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sawyer_beer::targetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool data\n\
";
  }

  static const char* value(const ::sawyer_beer::targetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sawyer_beer::targetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct targetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sawyer_beer::targetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sawyer_beer::targetRequest_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAWYER_BEER_MESSAGE_TARGETREQUEST_H
